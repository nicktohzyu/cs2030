/open Lazy.java
/open InfiniteList.java
/open InfiniteListImpl.java
/open EmptyList.java
Random rnd = new Random(1)
UnaryOperator<Integer> op = x -> { System.out.printf("iterate: %d -> %d\n", x, x + 1); return x + 1; };
Supplier<Integer> generator = () -> { System.out.println("generate: 1"); return 1; }
Function<Integer,Integer> doubler = x -> { System.out.printf("map: %d -> %d\n", x, x * 2); return x * 2; };
Function<Integer,Integer> oneLess = x -> { System.out.printf("map: %d -> %d\n", x, x - 1); return x - 1; };
Predicate<Integer> lessThan100 = x -> { System.out.printf("takeWhile: %d -> %b\n", x, x < 100); return x < 100; }
Predicate<Integer> moreThan10 = x -> { System.out.printf("filter: %d -> %b\n", x, x > 10); return x > 10; }
InfiniteList.iterate(0, op).filter(lessThan100).map(doubler).takeWhile(lessThan100).map(oneLess).limit(5).toArray()
InfiniteList.generate(generator).filter(lessThan100).map(doubler).takeWhile(lessThan100).map(oneLess).limit(5).toArray()
InfiniteList.iterate(0, x -> x + 1).limit(0).forEach(System.out::println)
InfiniteList.iterate(0, x -> x + 1).limit(1).forEach(System.out::println)
InfiniteList.iterate(0, x -> x + 1).filter(x -> x % 2 == 1).limit(10).forEach(System.out::println)
InfiniteList.iterate(0, x -> x + 1).limit(10).filter(x -> x % 2 == 1).forEach(System.out::println)
InfiniteList.iterate(0, x -> x + 1).takeWhile(x -> x < 10).forEach(System.out::println)
InfiniteList.iterate(0, x -> x + 1).takeWhile(x -> x < 10).filter(x -> x % 2 == 0).forEach(System.out::println)
/exit